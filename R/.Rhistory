#' Get GitHub metrics on a user or organization's repositories.
#' @import RCurl RJSONIO
#' @param userorg User or organization GitHub name.
#' @param repo Repository name.
#' @param url The base GitHub url (leave to default).
#' @return json output.
#' @export
#' @examples \dontrun{
#' github(userorg = 'ropensci', repo = 'rmendeley')
#' github(userorg = 'hadley', repo = 'ggplot2')
#' github(userorg = 'hadley', repo = 'ggplot2', 'allstats')
#' github(userorg = 'hadley', repo = 'ggplot2', return_ = 'forks')
#' }
github <- function(userorg = NA, repo = NA, return_ = 'show',
url = "https://api.github.com/repos/")
{
url2 <- paste(url, userorg, '/', repo, sep='')
message(url2)
xx <- getURL(url2)
tt <- fromJSON(xx)
if(return_=='show'){tt} else
if(return_=='allstats'){
list('watchers'=tt$watchers, 'open_issues'=tt$open_issues,
'forks'=tt$forks)} else
if(return_=='watchers'){tt$watchers} else
if(return_=='open_issues'){tt$open_issues} else
if(return_=='forks'){tt$forks}
}
require(RJSONIO); require(XML)
require(RCurl)
github(userorg = 'ropensci', repo = 'rmendeley')
github(userorg = 'ropensci')
#' Plot github stats
#'
#' This function plots the total number of forks and followers for all repositories of a certain user or organization.
#'
#' @param id name of the github user or organization
#' @param type either "user" or "org"
#' @author Scott Chamberlain
#' @export
gitstats <- function (id = "hadley", type = "user")
{
#ggplot is easier to load.
require(ggplot2);
if (type == "user") {
url = "https://api.github.com/users/"
}
else if (type == "org") {
url = "https://api.github.com/orgs/"
}
else stop("parameter 'type' has to be either 'user' or 'org' ")
url2 <- paste(url, id, "/repos?per_page=100", sep = "")
xx <- RCurl::getURL(url2)
tt <- RJSONIO::fromJSON(xx)
if (!length(tt) == 1) {
tt <- tt
}
else {
stop("user or organization not found - search GitHub? - https://github.com/")
}
out <- plyr::ldply(tt, function(x) t(c(x$name, x$forks, x$watchers)))
names(out) <- c("Repo", "Forks", "Watchers")
out$Forks <- as.integer(out$Forks)
out$Watchers <- as.integer(out$Watchers)
out2 <- reshape2::melt(out, id = 1)
out2$value <- as.numeric(out2$value)
out2$Repo <- as.factor(out2$Repo)
repoorder <- unique(out2[order(out2$value, decreasing = FALSE),
][, 1])
out2$Repo <- factor(out2$Repo, levels = repoorder)
myplot <- ggplot(out2, aes(Repo, value)) + geom_bar() + coord_flip() +
facet_wrap(~variable) + theme_bw(base_size = 18)
print(myplot)
invisible();
}
type = "org"
id = "ropensci"
if (type == "user") {
url = "https://api.github.com/users/"
}
else if (type == "org") {
url = "https://api.github.com/orgs/"
}
else stop("parameter 'type' has to be either 'user' or 'org' ")
url
url2 <- paste(url, id, "/repos?per_page=100", sep = "")
xx <- RCurl::getURL(url2)
tt <- RJSONIO::fromJSON(xx)
if (!length(tt) == 1) {
tt <- tt
}
out <- plyr::ldply(tt, function(x) t(c(x$name, x$forks, x$watchers)))
names(out) <- c("Repo", "Forks", "Watchers")
out$Forks <- as.integer(out$Forks)
out$Watchers <- as.integer(out$Watchers)
out
out <- plyr::ldply(tt, function(x) t(c(x$name, x$description)))
out
write.csv(out, "out.csv")
getOption("natureopensearch", stop("need an API key for the Disqus API"))
#' Search Disqus API.
#'
#' DETAILED DESCRIPTION
#' @import RCurl RJSONIO
#' @param query Search term(s).
#' @param parameter XXXX
#' @param method XXXX
#' @param url The base Disqus url (leave to default).
#' @return json output.
#' @export
#' @examples \dontrun{
#' disqus()
#' }
disqus <- function(query = NA, parameter = NA, method = NA,
url = "http://disqus.com/api/3.0",
key = getOption("natureopensearch", stop("need an API key for the Disqus API")),
..., curl = getCurlHandle())
{
url2 <- paste(url, "/", parameter, '/', method, '.json', sep='')
args <- list(api_key = key)
if(!is.na(query))
args$query <- if(type=='boolean')
{ paste('cql.keywords+', relation, '+', str_replace(query, ',', r2), sep='') } else
{ str_replace(query,',','+') }
if(!is.na(type))
args$queryType <- if(type=='search'){'search'} else
if(type=='boolean') {'cql'}
message(paste(url, '?query=', query, '&api_key=', key, '&httpAccept=application/json', sep=''))
tt <- getForm(url,
.params = args,
#     ...,
curl = curl)
out <- fromJSON(tt)
out
}
# http://disqus.com/api/3.0/users/listPosts.json?user=400&api_key=tprqF4g38bVVmow0KWLc416kopRvz6RL0D4zE1Qvmio27PaydQOoWUPZAwfnEVL9#'
require(RCurl)
require(RJSONIO)
disqus()
disqus(method = 'users', parameter = 'listPosts', user = 400)
library(govdat); library(reshape2); library(ggplot2)
dems <- sll_cw_dates(phrase='science', start_date='1996-01-20',
end_date='2012-09-01', granularity='year', party='D', printdf=TRUE)
repubs <- sll_cw_dates(phrase='science', start_date='1996-01-20',
end_date='2012-09-01', granularity='year', party='R', printdf=TRUE)
df <- melt(
rbind(data.frame(party = rep("D",nrow(dems)), dems), data.frame(party = rep("R",nrow(repubs)),repubs))
)
df$count <- as.numeric(df$count)
ggplot(df, aes(yearmonth, count, colour = party, group = party)) +
geom_line() +
labs(y="use of the word 'Science'") +
theme_bw(base_size=18) +
opts(axis.text.x = theme_text(size = 10),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
legend.position = c(0.2,0.8))
ggplot(df, aes(yearmonth, count, colour = party, group = party)) +
geom_line() +
scale_colour_manual(values=c("blue","red")) +
labs(y="use of the word 'Science'") +
theme_bw(base_size=18) +
opts(axis.text.x = theme_text(size = 10),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
legend.position = c(0.2,0.8))
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-09-01-gov-dat.Rmd")
library(govdat); library(reshape2); library(ggplot2)
dems <- sll_cw_dates(phrase='science', start_date='1996-01-20',
end_date='2012-09-01', granularity='year', party='D', printdf=TRUE)
repubs <- sll_cw_dates(phrase='science', start_date='1996-01-20',
end_date='2012-09-01', granularity='year', party='R', printdf=TRUE)
df <- melt(
rbind(data.frame(party = rep("D",nrow(dems)), dems), data.frame(party = rep("R",nrow(repubs)),repubs))
)
df$count <- as.numeric(df$count)
ggplot(df, aes(yearmonth, count, colour = party, group = party)) +
geom_line() +
scale_colour_manual(values=c("blue","red")) +
labs(y="use of the word 'Science'") +
theme_bw(base_size=18) +
opts(axis.text.x = theme_text(size = 10),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
legend.position = c(0.2,0.8))
library(plyr)
sll_ts_aggregatesearch('Nancy Pelosi')[[1]]
sll_ts_aggregatesearch('Nancy Pelosi')[[1]]$id
nancy <- ldply(sll_ts_aggregatetopsectors(sll_ts_aggregatesearch('Nancy Pelosi')[[1]]$id))
nancy # but just abbreviations for sectors
data(sll_ts_sectors) # load sectors abbrevations data
nancy2 <- merge(nancy, sll_ts_sectors, by="sector") # attach full sector names
nancy2_melt <- melt(nancy2[,-1], id.vars=3)
nancy2_melt$value <- as.numeric(nancy2_melt$value)
ggplot(nancy2_melt, aes(sector_name, value)) + # and lets plot some results
geom_bar() +
coord_flip() +
facet_wrap(~ variable, scales="free", ncol=1)
out <- nyt_cg_memberbioroles('A000358') # cool, lots of info, output cutoff for brevity
out[[3]][[1]][1:2]
akintwitter <- out[[3]][[1]]$twitter_id
library(twitteR)
tweets <- userTimeline(akintwitter, n=100)
tweets[1:5] # there's some gems in there no doubt
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-09-01-gov-dat.Rmd")
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-09-01-gov-dat.Rmd")
